---
title: "STA240 Final Project"
format: pdf
author: "Anthony Zhao, Abby Li, William Yan"
---

## Scenario 1

### Customer Arrival

Poisson process (rate = $\lambda$)

- $T_k$: Arrival time of the $k$th customer

- $W_k$: Time between the $k-1$th arrival and the $k$th arrival

$$
  W_k = T_k - T_{k-1}.
$$

$W_k \sim Pois(\lambda)$

where lambda = 5

### Service Time

$S_k \sim Exp(\lambda)$

where lambda = 6

## Arrival Times

```{r arrival times}

# simulating the arrival times of customers throughout the day

# Poisson process (lambda = 5)
# Tk= arrival time of the kth customer
# Wk= time between the k-1th customer arrival and the kth customer arrival where Wk ~ Pois(lambda)

# set parameter
lambdaA <- 5 # in units: customers per hour
hours <- 12 # operating hours: 10am to 10pm
total_time <- hours*60 # operating hours in minutes
lambdaA <- 5/60 # customers per minute
# converting to minutes because our lambda is low, and we can can get greater precision in analyses this way

n <- ceiling(lambdaA*total_time) # max number of customers the store can have throughout the day

# generate W1,..,Wn (calculating the time between the arrival times of 2 customers)
W_sample <- rexp(n, rate= lambdaA)

# calculate T or the arrival times by summing together the Wi arrival times

T_sample <- numeric(n)

for(i in 1:n) {
  T_sample[i] <- sum(W_sample[1:i])
}

# all possible arrival times of customers throughout the day (X minutes after opening)

# however, the store is only open for 12 hours or 720 minutes so we must get rid of the values that fall outside of the range (go beyond 720)

arrival_times <- T_sample[T_sample <= total_time]

arrival_times

```

### Arrival Times Analysis

```{r}
length(arrival_times) # 55 customers
mean(arrival_times) # 323 mins, 5.4 hours
min(arrival_times) # 10 mins
max(arrival_times) # 711 mins, 11.8 hours
```
In this simulation, the number of customers that will be arriving within the operating hours is 55, with the first customer arriving 10 minutes after opening (~10:10 am) and the last customer arriving 11.8 hours into the workday (~9:48 pm).

## Serving Times

```{r serving-times}
# given the output from above, simulate the serving times of customers before they leave

# notice that service time is modeled by exp(6)
lambdaS <- 6 # customers per hour
lambdaS <- 6/60 # customers per minute 

# simulate customer's service time 
# n= only simulating the service time for those where T_sample <= total_time
service_times <- rexp(length(arrival_times), rate= lambdaS)

service_times #these are the serving times for each arriving customer before they leave

```

### Serving Times Analysis

```{r service-times-graph}
boxplot(service_times, horizontal= TRUE, main= "Service Times", xlab= "Minutes")
mean(service_times) # 8.5 mins
```

The average service time is 8.5 minutes, with the data skewed right, consistent with an exponential distribution. This indicates that service times tend to lower. 

## Waiting Times

```{r customer-service}

# determining waiting times

# for each observation (customer), calculate when the service begins and when it ends 
# serving ends = service begins + service time
# service begins: either when the customer walks in, or when the previous customer leaves (assumes there is a waiting time)

# compare this to the arrival time 
# if arrival time > time service ends then wait time = 0
# but if arrival time < service time ends then wait time = time service ends- arrival time 

# variable initialization
waiting_times <- numeric(length(arrival_times))  # generating times for each customer
service_start <- numeric(length(arrival_times)) 
service_end <- numeric(length(arrival_times))  
current_end <- numeric(0) # service end time for current customer (i)

# iterate over each customer
for (i in 1:length(arrival_times)) {

  # only includes observations where service time > arrival time => which means there is a wait time
  # gets rid of observations where service < arrival time => 0 wait time
  if (length(current_end) > 0) {
    current_end <- current_end[current_end > arrival_times[i]]
  }
  
 if (length(current_end) == 0) {
   # scenario 1: if there is no waiting time, service starts at the customer arrival
    service_start[i] <- arrival_times[i]
  } else {
    # scenario 2: if there is a waiting time, service starts at the end of the previous customer's end time
    service_start[i] <- min(current_end)
  }
  
  # update the service end time for current customer by adding when service starts and how long the service takes
  service_end[i] <- service_start[i] + service_times[i]
  
  # add this service end time to current end services
  current_end <- c(current_end , service_end[i])
  
  # update waiting time
  waiting_times[i] <- service_start[i] - arrival_times[i]
}


simulation_results <- data.frame(
  customer = 1:length(arrival_times),
  arrival_time = arrival_times,
  service_length = service_times,
  service_start = service_start,
  service_end = service_end,
  waiting_time = waiting_times
)

print(head(simulation_results, 15)) # printing first 15 customers

```

```{r waiting-times-dist}
boxplot(waiting_times, horizontal= TRUE, main= "Waiting Times", xlab= "Minutes")
mean(waiting_times)
```

Waiting times tend to be short, if not zero, and on average, the waiting time is around 5 minutes. 

