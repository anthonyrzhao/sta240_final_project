---
title: "STA240 Final Project"
format: pdf
author: "Anthony Zhao, Abby Li, William Yan"
execute: 
  echo: false
editor: 
  markdown: 
    wrap: 72
---

# Scenario 1

### Customer Arrival

Poisson process (rate = $\lambda$)

-   $T_k$: Arrival time of the $k$th customer

-   $W_k$: Time between the $k-1$th arrival and the $k$th arrival

$$
  W_k = T_k - T_{k-1}.
$$

$W_k \sim Pois(\lambda)$

where $\lambda = 5$ customers per hour

### Service Time

$S_k \sim Exp(\lambda)$

where $\lambda = 6$ customers per hour, so the average customer needs to
wait 1/6 hours = 10 minutes.

## Arrival Times

Open at 10am, close at 10pm, 5 customers arrive per hour on average

(Expressed in minutes after opening)

```{r arrival-times, message=F, warning=F}
library(tidyverse)
library(lubridate)
library(knitr)
source("functions.R")

set.seed(121)

opening_time_s1 <- "10:00"
closing_time_s1 <- "22:00"
total_time_s1 <- calc_total_time(opening_time_s1, closing_time_s1)

arrival_rate_s1 <- 10 # customers per hour
arrival_times_s1 <- calc_simple_arrival_times(arrival_rate_s1, total_time_s1)

arrival_times_s1

```

### Arrival Times Analysis

In this simulation, the number of customers that will be arriving within
the operating hours is `r length(arrival_times_s1)`, with the first
customer arriving `r floor(min(arrival_times_s1))` minutes after opening
and the last customer arriving
`r ceiling(total_time_s1 - max(arrival_times_s1))` minutes before
closing

## Serving Times

The average customer takes 1/6 hours, or 10 minutes to serve. So \lambda
= 6

(The number of minutes taken by each customer after sitting down in the
restaurant)

```{r serving-times}
# given the output from above, simulate the serving times of customers before they leave

service_rate_s1 <- 6

service_times_s1 <- calc_simple_service_times(arrival_times_s1, service_rate_s1/3) # inside the function it gets multiplifed by 3

service_rate_s1

```

## Time of the day with arrival time

```{r}
# Start time as POSIXct
opening_time_s1 <- as.POSIXct("10:00", format = "%H:%M", tz = "UTC")

# Add minutes to the start time

time_of_day_s1 <- sapply(arrival_times_s1, function(m) {
  m <- round(m)  # Round to nearest whole number
  new_time <- opening_time_s1 + (m * 60)  # Add minutes converted to seconds
  format(new_time, "%H:%M")  # Format as "HH:MM"
})

time_of_day_s1
```

## Waiting Times

```{r customer-service}

# determining waiting times

# for each observation (customer), calculate when the service begins and when it ends 
# serving ends = service begins + service time
# service begins: either when the customer walks in, or when the previous customer leaves (assumes there is a waiting time)

# compare this to the arrival time 
# if arrival time > time service ends then wait time = 0
# but if arrival time < service time ends then wait time = time service ends- arrival time 

# variable initialization
waiting_times_s1 <- numeric(length(arrival_times_s1))  # generating times for each customer
service_start <- numeric(length(arrival_times_s1)) 
service_end <- numeric(length(arrival_times_s1))  
current_end <- numeric(0) # service end time for current customer (i)

# iterate over each customer
for (i in 1:length(arrival_times_s1)) {

  # only includes observations where service time > arrival time => which means there is a wait time
  # gets rid of observations where service < arrival time => 0 wait time
  if (length(current_end) > 0) {
    current_end <- current_end[current_end > arrival_times_s1[i]]
  }
  
 if (length(current_end) == 0) {
   # scenario 1: if there is no waiting time, service starts at the customer arrival
    service_start[i] <- arrival_times_s1[i]
  } else {
    # scenario 2: if there is a waiting time, service starts at the end of the previous customer's end time
    previous_end <- service_end[i - 1]
    service_start[i] <- max(arrival_times_s1[i], previous_end)
  }
  
  # update the service end time for current customer by adding when service starts and how long the service takes
  service_end[i] <- service_start[i] + service_times_s1[i]
  
  # add this service end time to current end services
  current_end <- c(current_end , service_end[i])
  
  # update waiting time
  waiting_times_s1[i] <- service_start[i] - arrival_times_s1[i]
}


scen1_sim_results <- data.frame(
  customer = 1:length(arrival_times_s1),
  arrival_time = arrival_times_s1,
  service_length = service_times_s1,
  service_start = service_start,
  service_end = service_end,
  waiting_time = waiting_times_s1,
  time_of_day = time_of_day_s1
)

head(scen1_sim_results, 5)

```

### Serving and Waiting Times Analysis

```{r service-times-graph, fig.height=2}

scen1_sim_results %>%
  ggplot(aes(x= service_length)) +
  geom_boxplot() +
  labs(
    x= "Minutes",
    title = "Distribution of Service Times"
  ) +
  scale_x_continuous(breaks = seq(0, 100, by = 10)) +
  theme_bw() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title = element_text(size = 13),
    axis.text = element_text(size = 13),
    plot.title = element_text(size = 13, hjust = 0.5)
  )

```

The average service time is `r round(mean(service_times_s1))` minutes,
with the data skewed right, consistent with an exponential distribution.
This indicates that service times tend to lower.

```{r waiting-times-dist, fig.height=2}

scen1_sim_results %>% 
  ggplot(aes(x= waiting_time)) +
  geom_boxplot() +
  labs(
    x= "Minutes",
    title = "Waiting Times"
  ) +
  theme_bw() +
  scale_x_continuous(breaks = seq(0, 500, by = 50)) +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title = element_text(size = 13),
    axis.text = element_text(size = 13),
    plot.title = element_text(size = 13, hjust = 0.5),
    panel.grid.minor = element_blank()
  )

```

Waiting times tends to be slightly right-skewed and on average, the
waiting time is `r round(mean(waiting_times_s1))` minutes.

```{r fig.height=3}

ggplot(scen1_sim_results, aes(x = arrival_time, y = waiting_times_s1)) +
  geom_point(color = "blue", size = 2, alpha = 0.6) +
    scale_x_continuous(
    breaks = seq(0, 720, by = 60)
  ) +
  labs(
    title = "Customer Waiting Times by Arrival Time",
    x = "Minutes after Opening",
    y = "Waiting Time (Minutes)"
  ) +
  theme_bw() +
  scale_y_continuous(breaks = seq(0, 500, by = 50)) +
  theme(
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 14),
    plot.title = element_text(size = 14, hjust = 0.5),
    panel.grid.minor = element_blank()
  )

```

# Scenario 2

Assumptions:

1.  5 dining tables and L chefs with operating hours 10am - 10pm. We
    choose here that L = 2

2.  each table only seats one customer

3.  service time modeled by an exponential distribution with rate Î»S =
    3L, so that the more chefs there are, the faster the service times
    become

4.  10 customers arrive every hour

```{r arrival-service-2}

opening_time_s2 <- "10:00"
closing_time_s2 <- "22:00"
total_time_s2 <- calc_total_time(opening_time_s2, closing_time_s2)

arrival_rate_s2 <- 30 # customers per hour
arrival_times_s2 <- calc_simple_arrival_times(arrival_rate_s2, total_time_s2)
```

## Restaurant Profits

Assumptions:

1.  each customer spends \$50 per meal (customers who are still in the
    queue when the restaurant closes won't pay)

2.  each chef earns a wage of \$40 per hour (paid for the entire
    duration of the restaurant's operating hours)

3.  Each table cost \$80 per day (extra service cost, rent, etc.)

4.  For customers who waited more than 30 minutes, they earn the
    restaurant half the amount of customers who didn't.

### Maximizing Profits

With 5 tables, 24 customers arriving per hour, and these dollar amounts,
how many chefs should we hire? We will run our simulation 100 times with
1 to 5 chefs on staff, to see which will maximize the expected profit.

```{r}
num_tables_s2 <- 5
df <- numeric(10)

for(b in 1:5) {
    num_chefs_s2 <- b
    for(i in 1:200) {
      arrival_times_s2 <- calc_simple_arrival_times(arrival_rate_s2, total_time_s2)
      service_times_s2 <- calc_simple_service_times(arrival_times_s2, num_chefs_s2)
      sim_s2 <- restaurant_sim(arrival_times_s2, service_times_s2, num_tables_s2, total_time_s2)
      df <- rbind(df, summarize_resturant_sim_s2(sim_s2$waiting_times, sim_s2$queue_size_history, sim_s2$occupied_tables_history, num_chefs_s2, total_time_s2, num_tables_s2))
    }
}

df <- df[-1, ]
df |> sample_n(8) # show 8 random rows
```

```{r scenario-2-profit-plots, echo=FALSE}

df |>
  group_by(num_chefs) |>
  summarise(mean = mean(profit), sd = sd(profit)) |>
  ggplot(aes(x = num_chefs, y = mean)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  theme_bw() +
  labs(
    x = "Number of Chefs",
    y = "Average Profit (Dollars)"
  ) +
  theme(
    axis.text = element_text(size = 14),
    axis.title = element_text(size = 14)
  )

```

```{r scenario-2-wait-time-plots, echo=FALSE}

df |>
  group_by(num_chefs) |>
  summarise(mean = mean(long_waits/total_customers), sd = sd(long_waits/total_customers)) |>
  ggplot(aes(x = num_chefs, y = mean)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  theme_bw() +
  scale_y_continuous(limits = c(0, 1)) +
  labs(
    x = "Number of Chefs",
    y = "Proportion of Long Waits"
  ) +
  theme(
    axis.text = element_text(size = 14),
    axis.title = element_text(size = 14)
  )

```

```{r scenario-2-quene, echo=FALSE}

df |>
  group_by(num_chefs) |>
  summarise(mean = mean(avg_queue_length), sd = sd(avg_queue_length)) |>
  ggplot(aes(x = num_chefs, y = mean)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  theme_bw() +
  labs(
    x = "Number of Chefs",
    y = "Average Queue Length"
  ) +
  theme(
    axis.text = element_text(size = 14),
    axis.title = element_text(size = 14)
  )
```

```{r scenario-2-table-occupied, echo=FALSE}

df |>
  group_by(num_chefs) |>
  summarise(mean = mean(downtime_proportion), sd = sd(downtime_proportion)) |>
  ggplot(aes(x = num_chefs, y = mean)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd), width = 0.2) +
  theme_bw() +
  scale_y_continuous(limits = c(0, 1)) +
  labs(
    x = "Number of Chefs",
    y = "Downtime Proportion"
  )  +
  theme(
    axis.text = element_text(size = 14),
    axis.title = element_text(size = 14)
  )
```

# Scenario 3

To make the simulation more realistic, we have a third scenario.

Assumptions: 1. Open at 10am, close at 10pm 2. From 12pm to 2pm and 6pm
to 8pm, 60 customers arrive every hour. Otherwise, 6 arrive every hour.
3. Instead of simulating service times with Exp(\lambda) where \lambda =
3 times the number of chefs, we do \lambda = ln(chefs + 1), so that
additional chefs beyond 2 make more of an impact. 4. Each customer will
sit for a minimum of 45 minutes. This flat value will be added to the
simulated service time, and is unaffected by staffing. 5. In the profit
calculation, there is a cost of adding additional tables (which are now
variable), which is \$40 per table. 6. Chefs still cost \$40 per hour to
hire, and each customer earns \$50.

## Arrival Times

```{r fig.width=7.5, fig.height=3}

opening_time_s3 <- "10:00"
closing_time_s3 <- "22:00"
total_time_s3 <- calc_total_time(opening_time_s3, closing_time_s3)

arrival_times_s3 <- calc_realistic_arrival_times(
  open = "10:00",
  close = "22:00",
  lunch_peak_start = "12:00",
  lunch_peak_end = "14:00", 
  dinner_peak_start = "18:00",
  dinner_peak_end = "20:00", 
  lambda_down = 6, lambda_peak = 60)

ggplot(data = data.frame(arrival_times_s3), aes(x = arrival_times_s3)) +
  geom_histogram(binwidth = 10, fill = "blue", color = "black", alpha = 0.7) +
  labs(
    x = "Minutes After Opening",
    y = "Number of Arrivals"
  ) +
  scale_x_continuous(
    breaks = seq(0, 720, by = 60)
  ) +
  scale_y_continuous(
    breaks = seq(0, 25, by = 5)
  ) +
  theme_bw() +
  theme(
    axis.text = element_text(size = 14),
    axis.title = element_text(size = 14)
  )
    
```

## Maximizing Profits

Under this scenario, how can we maximize profits?

```{r}

df <- numeric(10)
for(a in 1:5) {
  num_chefs_s3 = a
  for(b in seq(1, 101, by = 10)) {
    num_tables_s3 = b
    for(i in 1:100) {
      arrival_times_s3 <- calc_realistic_arrival_times(
        open = "10:00", close = "22:00",
        lunch_peak_start = "12:00",
        lunch_peak_end = "14:00", 
        dinner_peak_start = "18:00",
        dinner_peak_end = "20:00", 
        lambda_down = 6, lambda_peak = 60)
      service_times_s3 <- calc_realistic_service_times(arrival_times_s3, num_chefs_s3)
      sim_s3 <- restaurant_sim(arrival_times_s3, service_times_s3, num_tables_s3, total_time_s3)
      df <- rbind(df, summarize_resturant_sim_s3(sim_s3$waiting_times, sim_s3$queue_size_history, sim_s3$occupied_tables_history, num_chefs_s3, total_time_s3, num_tables_s3))
    }
  }
}

df <- df[-1, ]
```

```{r fig.width=9, fig.height=4.5}
#Mean profit
df |>
  group_by(num_chefs, num_tables) |>
  summarise(mean = mean(profit), sd = sd(profit)) |>
  ggplot(aes(x = num_tables, y = num_chefs, color = mean, size = sd)) +
  geom_point() +
  scale_color_gradient(low = "white", high = "darkred") +
  scale_x_continuous(
    breaks = seq(min(df$num_tables), ceiling(max(df$num_tables)), by = 10),
    labels = seq(min(df$num_tables), ceiling(max(df$num_tables)), by = 10)  
  ) +
  scale_y_continuous(
    breaks = seq(min(df$num_chefs), ceiling(max(df$num_chefs)), by = 1),
    labels = seq(min(df$num_chefs), ceiling(max(df$num_chefs)), by = 1),
    expand = expansion(mult = c(0.1, 0.1))
  ) +
  scale_size_continuous(
    range = c(2, 16)
  ) +
  theme_bw() +
  theme(
    panel.grid = element_blank(),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text.x = element_text(size = 14),
    axis.text.y = element_text(size = 14),
    legend.title = element_text(size = 14),
    legend.text = element_text(size = 14),
    plot.margin = margin(t = 35, b = 15)
  ) +
  labs(
    x = "Number of Tables",
    y = "Number of Chefs",
    color = "Average Daily Profit ($)",
    size = "Standard Deviation of \nDaily Profit ($)"
  )
  
df_summary <- df |>
  group_by(num_chefs, num_tables) |>
  summarise(
    mean_profit = mean(profit), 
    sd_profit = sd(profit),
    mean_avg_waiting_time = mean(avg_waiting_time), 
    sd_avg_waiting_time = sd(avg_waiting_time),
    mean_long_waits = mean(long_waits),
    sd_long_waits = sd(long_waits),
    mean_avg_queue_length = mean(avg_queue_length),
    sd_avg_queue_length = sd(avg_queue_length),
    mean_max_queue_length = mean(max_queue_length),
    sd_max_queue_length = sd(max_queue_length),
    mean_avg_tables_occupied = mean(avg_tables_occupied),
    sd_avg_tables_occupied = sd(avg_tables_occupied),
    mean_downtime_proportion = mean(downtime_proportion),
    sd_downtime_propotion = sd(downtime_proportion),
    mean_long_waits_proportion = mean(long_waits / total_customers),
    sd_long_waits_proportion = sd(long_waits / total_customers)
  ) |>
  ungroup() |>
  arrange(mean_profit) |>
  slice(1:5) |>
  mutate(description = paste("Chefs:", num_chefs, "\n Tables:", num_tables))


df_summary
```

```{r scenario-3-plots, fig.height=4}

df_summary |>
  ggplot(aes(x = reorder(description, -mean_profit), y = mean_long_waits_proportion)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_errorbar(aes(ymin = 0, ymax = mean_long_waits_proportion + sd_long_waits_proportion), width = 0.2) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = 16),
    axis.text.y = element_text(size = 14)
  ) +
  labs(
    x = "Scenario",
    y = "Proportion of Long Waits"
  )

df_summary |>
  ggplot(aes(x = reorder(description, -mean_profit), y = mean_downtime_proportion)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_errorbar(aes(ymin = mean_downtime_proportion - sd_downtime_propotion, ymax = mean_downtime_proportion + sd_downtime_propotion), width = 0.2) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = 16),
    axis.text.y = element_text(size = 14)
  ) +
  labs(
    x = "Scenario",
    y = "Daily Downtime Proportion"
  )

df_summary |>
  ggplot(aes(x = reorder(description, -mean_profit), y = mean_avg_queue_length)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_errorbar(aes(ymin = mean_avg_queue_length - sd_avg_queue_length, ymax = mean_avg_queue_length + sd_avg_queue_length), width = 0.2) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = 16),
    axis.text.y = element_text(size = 14)
  ) +
  labs(
    x = "Scenario",
    y = "Average Queue Length"
  )

df_summary |>
  ggplot(aes(x = reorder(description, -mean_profit), y = mean_profit)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
  geom_errorbar(aes(ymin = mean_profit - sd_profit, ymax = mean_profit + sd_profit), width = 0.2) +
  geom_text(aes(label = round(mean_profit, 0), vjust = 6), color = "white", size = 4.5) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = 16),
    axis.text.y = element_text(size = 14)
  ) +
  labs(
    x = "Scenario",
    y = "Daily Profit ($)"
  )

```
